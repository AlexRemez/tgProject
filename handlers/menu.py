from aiogram import Router, Bot, F
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from db.models import Students, Coaches
from handlers.authorization import Auth

from keyboards.for_auth import auth
from keyboards.for_menu import main_menu_kb
from keyboards.for_profile import coach_services, student_services

menu_router = Router()


@menu_router.message(Text(text="‚≠êÔ∏è–ú–µ–Ω—é"))
async def main_menu(message: Message):
    id_tg = message.from_user.id
    coach = await Coaches.get(tg_id=id_tg)
    student = await Students.get(tg_id=id_tg)
    if coach or student:
        await message.answer("‚≠êÔ∏è <b>–ú–µ–Ω—é</b> ‚≠êÔ∏è", reply_markup=main_menu_kb(auth=True))
    else:
        await message.answer("‚≠êÔ∏è <b>–ú–µ–Ω—é</b> ‚≠êÔ∏è", reply_markup=main_menu_kb(auth=False))


@menu_router.callback_query(Text(text="main_menu"))
async def main_menu(callback: CallbackQuery):
    id_tg = callback.from_user.id
    coach = await Coaches.get(tg_id=id_tg)
    student = await Students.get(tg_id=id_tg)
    if coach or student:
        await callback.message.edit_text("‚≠êÔ∏è <b>–ú–µ–Ω—é</b> ‚≠êÔ∏è", reply_markup=main_menu_kb(auth=True))
    else:
        await callback.message.edit_text("‚≠êÔ∏è <b>–ú–µ–Ω—é</b> ‚≠êÔ∏è", reply_markup=main_menu_kb(auth=False))


@menu_router.callback_query(Text(text="hide_menu"))
async def hide_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer(text="–í—ã —Å–∫—Ä—ã–ª–∏ –º–µ–Ω—é")


@menu_router.message(Command("profile"))
async def check_profile(message: Message, state: FSMContext):
    await message.delete()
    student = await Students.get(tg_id=message.from_user.id)
    coach = await Coaches.get(tg_id=message.from_user.id)
    await state.update_data(previous_messages=[])
    if coach:
        students_list = await Students.filter(coach_id=coach.id)
        await message.answer(
            f"\
            üë§<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞</b>üë§\
            \n‚ö´Ô∏è–ù–∏–∫–Ω–µ–π–º: {coach.first_name}\
            \nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {coach.telephone}\
            \nüë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students_list)}\
            \nüìÖ–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {coach.date_auth}\
            ",
            parse_mode="HTML",
            reply_markup=coach_services()
        )
    elif student:
        coach = await Coaches.get(id=student.coach_id)
        if coach:
            coach_name = coach.first_name
        else:
            coach_name = "–ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞"
        await message.answer(
            f"\
            üë§<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>üë§\
            \n‚ö™Ô∏è–ù–∏–∫–Ω–µ–π–º: {student.first_name}\
            \nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {student.telephone}\
            \n‚ö´Ô∏è–í–∞—à —Ç—Ä–µ–Ω–µ—Ä: {coach_name}\
            \nüìÖ–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {student.date_auth}\
            ",
            parse_mode="HTML",
            reply_markup=student_services(coach)
        )
    else:
        await message.answer("<b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>", parse_mode="HTML", reply_markup=None)


@menu_router.callback_query(Text(text="profile"))
async def check_profile(callback: CallbackQuery, state: FSMContext):
    student = await Students.get(tg_id=callback.from_user.id)
    coach = await Coaches.get(tg_id=callback.from_user.id)
    await state.update_data(previous_messages=[])
    if coach:
        students_list = await Students.filter(coach_id=coach.id)
        await callback.message.edit_text(
            f"\
            üë§<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞</b>üë§\
            \n‚ö´Ô∏è–ù–∏–∫–Ω–µ–π–º: {coach.first_name}\
            \nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {coach.telephone}\
            \nüë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students_list)}\
            \nüìÖ–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {coach.date_auth}\
            ",
            parse_mode="HTML",
            reply_markup=coach_services()
        )
    elif student:
        coach = await Coaches.get(id=student.coach_id)
        if coach:
            coach_name = coach.first_name
        else:
            coach_name = "–ù–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞"
        await callback.message.edit_text(
            f"\
            üë§<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>üë§\
            \n‚ö™Ô∏è–ù–∏–∫–Ω–µ–π–º: {student.first_name}\
            \nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {student.telephone}\
            \n‚ö´Ô∏è–í–∞—à —Ç—Ä–µ–Ω–µ—Ä: {coach_name}\
            \nüìÖ–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {student.date_auth}\
            ",
            parse_mode="HTML",
            reply_markup=student_services(coach)
        )
    else:
        await callback.message.answer("<b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>", parse_mode="HTML", reply_markup=None)


@menu_router.message(Command("join"))
async def start_auth(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(Auth.auth_state)
    await message.delete()
    id_tg = message.from_user.id
    coach = await Coaches.get(tg_id=id_tg)
    student = await Students.get(tg_id=id_tg)
    if coach or student:
        await message.answer("<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>", parse_mode="HTML")
        await state.clear()
    else:
        await message.answer("<b>–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?</b>", parse_mode="HTML", reply_markup=auth())


@menu_router.callback_query(Text(text="join"))
async def start_auth(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.set_state(Auth.auth_state)
    await callback.message.delete()
    id_tg = callback.from_user.id
    coach = await Coaches.get(tg_id=id_tg)
    student = await Students.get(tg_id=id_tg)
    if coach or student:
        await callback.answer("<b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>", parse_mode="HTML", show_alert=True)
        await state.clear()
    else:
        await callback.message.answer("<b>–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?</b>", parse_mode="HTML", reply_markup=auth())
