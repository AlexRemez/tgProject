from aiogram import Router, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from sqlalchemy.exc import MultipleResultsFound

from db.models import Students, Coaches, Exercises, Tags, Athletes, ExerciseResults, ExerciseTag
from filters.filters_exam import is_better
from functions.exam_functions import calculate_points
from handlers.authorization import Auth
from keyboards.for_exam import exam_alert_kb, exam_ex_level_kb, exam_ex_num_kb, exam_choose_confirm, exam_notify, \
    exam_access_kb, my_exam_kb, exam_preparation_kb, start_exam_kb, exam_attempt_kb, finish_exam_kb
from keyboards.for_start_bot import back_menu_kb

exam_router = Router()


@exam_router.callback_query(Text(text="exam"))
async def exam_alert(callback: CallbackQuery, state: FSMContext):
    student = await Students.get(tg_id=callback.from_user.id)
    if student:
        await state.update_data(student_exam=student)

    text = "<b>–ê –í–´ –ì–û–¢–û–í–´ –ö –ë–û–Æ –ù–ê –°–¢–û–õ–ï –ë–ò–õ–¨–Ø–†–î–ù–û–ì–û –ó–ê–õ–ê‚ÅâÔ∏è</b>\
    \n\n<i>–ï—Å–ª–∏ –¥–∞, —Ç–æ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω –ø–æ –±–∏–ª—å—è—Ä–¥—É‚ùóÔ∏è " \
           "–ó–¥–µ—Å—å –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è —Å–ª–∞–±–∞–∫–æ–≤ –∏ —Ç—Ä—É—Å–æ–≤ - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–º–µ–ª—ã–µ –∏ " \
           "–æ–ø—ã—Ç–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–∏–º –≤—ã–∑–æ–≤–æ–º.</i>"
    await callback.message.edit_text(
        text=text,
        reply_markup=exam_alert_kb()
    )


@exam_router.callback_query(Text("exam_choose_ex"))
async def exam_ex_filter(callback: CallbackQuery, state: FSMContext):
    await state.update_data(flag=False)
    athlete = await Athletes.get(tg_id=callback.from_user.id)

    if athlete is None:
        await state.set_state(Auth.athlete_first_name)
        await callback.answer(text="–ù–∞–º –Ω—É–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ "
                                   "–≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –∏ —Å–≤—è–∑–∏ —Å –≤–∞–º–∏üòú",
                              show_alert=True)
        await callback.message.edit_text(
            text="<b>–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è</b>"
                 "\n\n<u>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–æ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!</u>",
            reply_markup=back_menu_kb(text="–û—Ç–º–µ–Ω–∞")
        )

    elif not athlete.is_active:
        await callback.answer(text="–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏‚è≥", show_alert=True)
    else:
        text = "<b>–≠–¢–ê–ü 1: –í–´–ë–û–† –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø.</b> \n\n<i>–ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, " \
           "—á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏. –ò–¥–∏—Ç–µ –Ω–∞ –≤—Å–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ, —Ä–µ–±—è—Ç–∞‚ùóÔ∏è " \
           "–í—ã–±–∏—Ä–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏–ª–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ - –≥–ª–∞–≤–Ω–æ–µ, " \
           "–Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–µ–π—à–∏–µ –º–æ–≥—É—Ç –≤—ã–∂–∏—Ç—å –Ω–∞ —ç—Ç–æ–º —ç–∫–∑–∞–º–µ–Ω–µ‚ùóÔ∏è</i>"

        keyboard = exam_ex_level_kb()

        await callback.message.edit_text(text=text, reply_markup=keyboard)


@exam_router.callback_query(Text(startswith="level"))
async def level_exercise(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    flag = data['flag']

    level = callback.data
    await state.update_data(level=level)

    print(level)
    tag: Tags = await Tags.get(tag_name=level)
    exercises = await tag.get_exercises()
    print(f"–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ç–µ–≥–∞ {tag.tag_name}: {exercises}")

    text = "<i><b>–°–ª—É—à–∞–π, –º–∞—á–æü§†</b> " \
           "\n–¢—ã –≥–æ—Ç–æ–≤ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è‚ùì " \
           "–ó–¥–µ—Å—å –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è —Ç—Ä—É—Å–æ–≤ –∏ –Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—ÖüíØ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–µ —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤‚ùóÔ∏è " \
           "\n–°–∫–∞–∂–∏ –º–Ω–µ, –Ω–∞ –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç—ã —Å—Ç–∞–≤–∏—à—å‚ùì –ë—É–¥–µ—à—å —Å–º–µ–ª—ã–º –∏ –≤—ã–±–µ—Ä–µ—à—å —Å–∞–º–æ–µ –∂–µ—Å—Ç–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ " \
           "–∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ—à—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –ø–æ—Ç–æ–ø—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω–µüò± –ù–æ–º–µ—Ä - —ç—Ç–æ —Ç–≤–æ–π –≤—ã–±–æ—Ä, " \
           "–∏ –æ–Ω –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, –∫—Ç–æ —Ç—ã –∑–¥–µ—Å—å –∏ —Å —á–µ–º –∏–¥–µ—à—å –Ω–∞ –±–∏–ª—å—è—Ä–¥–Ω—É—é –∞—Ä–µ–Ω—ÉüèÜ " \
           "\n–¢–∞–∫ —á—Ç–æ, –¥–µ—Ä–∑–∞–π, –≥–µ—Ä–æ–πü¶∏ –ù–∞–∑–æ–≤–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏ –ø–æ–∫–∞–∂–∏ –≤—Å–µ–º, " \
           "—á—Ç–æ —Ç—ã - –Ω–∞—Å—Ç–æ—è—â–∏–π –±–æ—Å—Å –±–∏–ª—å—è—Ä–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∞üòé</i>"

    keyboard = exam_ex_num_kb(exercises)

    if flag:
        await callback.message.delete()
        await callback.message.answer(text=text, reply_markup=keyboard)
    else:
        await callback.message.edit_text(text=text, reply_markup=keyboard)


@exam_router.callback_query(Text(startswith="exam_ex_num"))
async def exam_show_ex(callback: CallbackQuery, state: FSMContext):
    await state.update_data(flag=True)
    await callback.message.delete()

    data = callback.data.split("-")
    exercise: Exercises = await Exercises.get(id=int(data[1]))

    await state.update_data(exam_ex=exercise)

    img = FSInputFile("images/" + exercise.path)
    if exercise.description:
        description = f'\n{exercise.description}'
    else:
        description = ''
    if exercise.rules:
        rules = f'\n–ü—Ä–∞–≤–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{exercise.rules}'
    else:
        rules = ''

    athlete_tg_id = callback.from_user.id
    athlete = await Athletes.get(tg_id=athlete_tg_id)

    exam = await ExerciseResults.get(athlete_id=athlete.id,
                                     exam_status=True,
                                     exercise_id=exercise.id,
                                     completed_status=True)
    if exam:
        best_result = f"\n\n<b>–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>" \
                      f"\n{exam.results}"
    else:
        best_result = ""

    data = await state.get_data()
    level = data['level']
    keyboard = exam_choose_confirm(level=level)

    await callback.message.answer_photo(
        img,
        caption=f'<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {exercise.id}:</b><i>{description}</i>{rules}{best_result}',
        reply_markup=keyboard
    )


@exam_router.callback_query(Text("exam_choose_ex_confirm"))
async def notify_org(callback: CallbackQuery, state: FSMContext, bot: Bot):

    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    data = await state.get_data()
    athlete_tg_id = callback.from_user.id
    exercise = data['exam_ex']
    athlete = await Athletes.get(tg_id=athlete_tg_id)

    if await ExerciseResults.get(athlete_id=athlete.id,
                                 exam_status=True,
                                 exercise_id=exercise.id,
                                 completed_status=False):
        await callback.answer(text=f"–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ‚òëÔ∏è", show_alert=True)
    elif await ExerciseResults.get(athlete_id=athlete.id, exam_status=True, completed_status=False):
        await callback.answer(text=f"–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –¥—Ä—É–≥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ‚òëÔ∏è", show_alert=True)
    else:
        await callback.message.delete()
        text = "<i>–°–ª—É—à–∞–π, —Ç–∏–≥—ÄüêÖ –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞. " \
               "–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è‚è≥ –≠—Ç–æ –∫–∞–∫ —Å–∏–¥–µ—Ç—å –Ω–∞ —Ä–∞—Å—Ç–µ—Ä–∑–∞–Ω–∏–µ –∞–∫—É–ª–∞–º, " \
               "–ø—Ä–∞–≤–¥–∞?ü¶à –ù–æ –Ω–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è, –≥–µ—Ä–æ–π, —Ç—ã —Å–¥–µ–ª–∞–ª —Å–≤–æ–µ –¥–µ–ª–æ, –∞ —Å—É–¥—å–±–∞ —Ç–µ–ø–µ—Ä—å –≤ —Ä—É–∫–∞—Ö –±–∏–ª—å—è—Ä–¥–Ω—ã—Ö –±–æ–≥–æ–≤üí´</i>"

        await callback.message.answer(
            text=text
        )

        username = str(callback.from_user.username)
        if username == "None":
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            username = "@" + username

        athlete_first_name = athlete.first_name
        athlete_last_name = athlete.last_name
        athlete_email = athlete.email

        ################################################################
        flag = True
        try:
            student: Students = data["student_exam"]
        except KeyError:
            flag = False

        flag_2 = True
        if flag:
            coach: Coaches = await Coaches.get(id=student.coach_id)
            if coach is None:
                flag = False
            else:
                if coach.tg_id == 5691938305:
                    flag_2 = False

        await ExerciseResults.create(
            exam_status=True,
            athlete_id=athlete.id,
            exercise_id=exercise.id
        )

        exam = await ExerciseResults.get(athlete_id=athlete.id,
                                         exam_status=True,
                                         exercise_id=exercise.id,
                                         completed_status=False)

        ################################################################
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∑–∞ —ç–∫–∑–∞–º–µ–Ω —á–µ–ª–æ–≤–µ–∫—É (–Ω–µ —Ç—Ä–µ–Ω–µ—Ä)
        if flag_2:

            text = f"üí¨<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω</b>üí¨"\
                   f"\n<b>–ò–º—è:</b> {athlete_first_name}"\
                   f"\n<b>–§–∞–º–∏–ª–∏—è:</b> {athlete_last_name}"\
                   f"\n<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> ‚Ññ{exercise.id}"\
                   f"\n\n<b>Username:</b> {username}"\
                   f"\n<b>–ü–æ—á—Ç–∞:</b> {athlete_email}"

            await bot.send_message(chat_id=5691938305,
                                   text=text,
                                   reply_markup=exam_notify(exam.id))

        # –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –∏ –µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä—É
        if flag:
            text = f"üí¨<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω</b>üí¨"\
                   f"\n<b>–í–∞—à —É—á–µ–Ω–∏–∫:</b> {athlete_first_name} {athlete_last_name}" \
                   f"\n<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:</b> ‚Ññ{exercise.id}"\
                   f"\n\n<b>Username:</b> {username}"

            if not flag_2:
                text += f"\n<b>–ü–æ—á—Ç–∞:</b> {athlete_email}"

            await bot.send_message(
                chat_id=coach.tg_id,
                text=text,
                reply_markup=exam_notify(exam_id=exam.id)
            )


@exam_router.callback_query(Text(startswith="check_exam"))
async def check_exam(callback: CallbackQuery):
    exam_id = callback.data.split("-")[1]
    try:
        if callback.data.split("-")[2]:
            continue_exam = True
        print("–ü–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —ç–∫–∑–∞–º–µ–Ω–∞")
    except IndexError:
        continue_exam = False
        print(f"–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚Ññ{exam_id}")
    exam = await ExerciseResults.get(id=int(exam_id))
    print(exam.exam_status, exam.exercise.id, exam.athlete.first_name)

    img = FSInputFile("images/" + exam.exercise.path)
    if exam.exercise.description:
        description = f'\n{exam.exercise.description}'
    else:
        description = ''
    if exam.exercise.rules:
        rules = f'\n–ü—Ä–∞–≤–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{exam.exercise.rules}'
    else:
        rules = ''

    tags = exam.exercise.tags
    print(tags)
    ex_tags = "\n\n"
    for tag in tags:
        tag: ExerciseTag
        ex_tags += f"{tag.tag.tag_name} "
    if callback.from_user.id == 5691938305 and not continue_exam:
        await callback.message.delete()
        keyboard = exam_access_kb(exam_id)
    elif callback.from_user.id == exam.athlete.tg_id:
        await callback.message.delete()
        keyboard = exam_preparation_kb(exam_id)
    else:
        keyboard = None
    print(ex_tags)

    await callback.message.answer_photo(img,
                                        caption=f'<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {exam.exercise.id}:</b><i>{description}</i>{rules}'
                                                f'{ex_tags}',
                                        reply_markup=keyboard)


@exam_router.callback_query(Text(startswith="exam_access"))
async def exam_access(callback: CallbackQuery, bot: Bot):
    exam_id = callback.data.split("-")[1]
    exam = await ExerciseResults.get(id=int(exam_id))

    await callback.message.delete()
    await callback.message.answer(
        text=f"<b>{exam.athlete.first_name} {exam.athlete.last_name} –¥–æ–ø—É—â–µ–Ω –∫ —ç–∫–∑–∞–º–µ–Ω—É‚úÖ</b>"
    )

    keyboard = my_exam_kb(exam_id, continue_exam=True)
    await bot.send_message(
        chat_id=exam.athlete.tg_id,
        text="<b>–í—ã –¥–æ–ø—É—â–µ–Ω—ã –∫ —ç–∫–∑–∞–º–µ–Ω—É‚úÖ</b>",
        reply_markup=keyboard
    )


@exam_router.callback_query(Text(startswith="exam_forbid"))
async def exam_forbid(callback: CallbackQuery, bot: Bot):
    exam_id = callback.data.split("-")[1]
    exam = await ExerciseResults.get(id=int(exam_id))
    athlete_tg_id = exam.athlete.tg_id

    await exam.delete()
    await callback.message.delete()
    await callback.message.answer(text="<b>–í –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —ç–∫–∑–∞–º–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ‚ùå</b>")

    await bot.send_message(
        chat_id=athlete_tg_id,
        text="<b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω –æ—Ç–∫–ª–æ–Ω—ë–Ω‚ùå</b>"
    )


@exam_router.callback_query(Text(text="hide_message"))
async def hide_message(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        text="<b>–≠–∫–∑–∞–º–µ–Ω –æ—Ç–ª–æ–∂–µ–Ω‚úñÔ∏è</b>"
    )


@exam_router.callback_query(Text(startswith="preparation_cam"))
async def preparation_cam(callback: CallbackQuery):
    exam_id = callback.data.split("-")[1]

    text = "<b>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∫ —Å—ä–µ–º–∫–µ, –≥–µ—Ä–æ–π!</b> \n<i>–ó–∞—Ä—è–¥–∏ –∫–∞–º–µ—Ä—É –±–µ—Å—Å—Ç—Ä–∞—à–∏–µ–º, " \
           "–Ω–∞–π–¥–∏ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Ä–∞–∫—É—Ä—Å –∏ –ø–æ—Å—Ç–∞–≤—å –Ω–∞ —Å—Ç–æ–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, " \
           "–∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∂–µ—Ç, –∫—Ç–æ –∑–¥–µ—Å—å –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ä–æ–ª—å –±–∏–ª—å—è—Ä–¥–∞. " \
           "–≠—Ç–æ —Ç–≤–æ–π –º–æ–º–µ–Ω—Ç, –∏ —Ç—ã –≥–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –≤–µ–ª–∏–∫–∏–º!</i>" \
           "\n\nP.S. <u>–í—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–Ω—è—Ç–æ –æ–¥–Ω–∏–º –¥—É–±–ª–µ–º.</u>"

    keyboard = start_exam_kb(exam_id)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        text=text,
        reply_markup=keyboard
    )


@exam_router.callback_query(Text(startswith="start_exam"))
async def exam_attempt(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("-")
    exam_id = data[1]
    print(callback.data)

    try:
        result = data[3]
    except IndexError:
        await state.update_data(results_list=[])
        result = None

    if result == "good":
        state_data = await state.get_data()
        results_list = state_data['results_list']
        results_list.append(True)
        await state.update_data(results_list=results_list)
        print(results_list)
    elif result == "bad":
        state_data = await state.get_data()
        results_list = state_data['results_list']
        results_list.append(False)
        await state.update_data(results_list=results_list)
        print(results_list)

    try:
        attempt = int(data[2]) + 1
    except IndexError:
        attempt = 1

    if attempt <= 10:
        keyboard = exam_attempt_kb(exam_id, attempt)
        await callback.message.edit_text(
            text=f"<b>{attempt} –ü–û–î–•–û–î</b>",
            reply_markup=keyboard
        )
    else:
        state_data = await state.get_data()
        results_list = state_data['results_list']
        text_result = ""
        for result in results_list:
            if result:
                text_result += "‚úÖ"
            else:
                text_result += "‚ùå"

        athlete = await Athletes.get(tg_id=callback.from_user.id)
        exam = await ExerciseResults.get(id=int(exam_id))

        best_exam = await ExerciseResults.get(athlete_id=athlete.id,
                                              exam_status=True,
                                              exercise_id=exam.exercise_id,
                                              completed_status=True)
        if best_exam:
            if is_better(best_exam, text_result):
                await exam.update(results=text_result)
                points = await calculate_points(exam.id)
                previous_score = athlete.points
                new_score = (previous_score - best_exam.points) + points
                await best_exam.update(results=text_result, points=points)
                await athlete.update(points=new_score)
                await callback.message.edit_text(
                    text=f"<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:</b>"
                         f"\n\n<b>–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>"
                         f"\n{best_exam.results}"
                         f"\n\n<b>–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>"
                         f"\n{text_result}"
                         f"\n\n<b>–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>"
                         f"\n<i>{previous_score}</i> ‚û°Ô∏è <b>{new_score}</b>"
                )
            else:
                await callback.message.edit_text(
                    text=f"<b>–£–í–´‚ùóÔ∏è</b>"
                         f"\n\n<b>–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>"
                         f"\n{best_exam.results}"
                         f"\n\n<b>–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>"
                         f"\n{text_result}"
                )
            await exam.delete()
        else:
            await exam.update(results=text_result, completed_status=True)
            points = await calculate_points(exam.id)
            await exam.update(points=points)
            previous_score = athlete.points
            new_score = previous_score + points
            await athlete.update(points=new_score)
            await callback.message.edit_text(
                text=f"<b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:</b>"
                     f"\n{text_result}"
                     f"\n\n<b>–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>"
                     f"\n<i>{previous_score}</i> ‚û°Ô∏è <b>{new_score}</b>"
            )
